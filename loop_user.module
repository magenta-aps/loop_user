<?php
/**
 * @file
 * Code for the Loop user feature.
 */

include_once 'loop_user.features.inc';

/**
 * Implements hook_views_api().
 */
function loop_user_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements hook_block_info().
 */
function loop_user_block_info() {
  return array(
    'loop_user_my_content' => array(
      'info' => t('User my content'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'loop_user_best_answers' => array(
      'info' => t('User best answers'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function loop_user_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'loop_user_my_content':
      // "My content" block.
      if (user_access('access content')) {
        if (arg(0) == 'user' && is_numeric(arg(1))) {
          $profile = user_load(arg(1));
        }
        else {
          $profile = FALSE;
        }
        $variables = array('profile' => $profile);
        $block['content'] = theme('loop_user_my_content', $variables);
      }
      else {
        $block['content'] = FALSE;
      }
      break;

    case 'loop_user_best_answers':
      // Display users best answers.
      if (user_access('access content')) {
        if (arg(0) == 'user' && is_numeric(arg(1))) {
          $uid = arg(1);
          $variables = _loop_user_fetch_user_answers($uid);
          $block['content'] = theme('loop_user_best_answers', $variables);
        }
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function loop_user_theme() {
  return array(
    'loop_user_my_content' => array(
      'variables' => array(),
      'template' => 'templates/loop-user--my-content',
    ),
    'loop_user_best_answers' => array(
      'variables' => array(),
      'template' => 'templates/loop-user--best-answers',
    ),
  );
}

/**
 * Fetches users answers and and number of best answers.
 *
 * @param string $uid
 *   The user.
 *
 * @return array
 *   The answers.
 */
function _loop_user_fetch_user_answers($uid) {
  // Fetch all flags.
  $flags = db_select('flag_counts', 'f')
    ->fields('f')
    ->condition('entity_type', 'comment')
    ->orderBy('count')
    ->execute()
    ->fetchAllAssoc('entity_id');

  // Fetch all comments.
  $comments = db_select('comment', 'c')
    ->fields('c')
    ->execute()
    ->fetchAllAssoc('cid');

  $user_comments = db_select('comment', 'c')
    ->fields('c')
    ->condition('uid', $uid)
    ->execute()
    ->fetchAllAssoc('cid');

  $top_comments = array();
  $nids = array();
  foreach ($flags as $flag) {
    // Find comment.
    $comment = (isset($comments[$flag->entity_id])) ? $comments[$flag->entity_id] : FALSE;

    // Skip if comment already added.
    if (array_search($comment->nid, $nids) !== FALSE) {
      continue;
    }

    // Add comment to user.
    if ($comment->uid == $uid) {
      $top_comments[] = array(
        'comment' => $comment,
        'flag' => $flags[$comment->cid],
      );
    }

    $nids[] = $comment->nid;
  }

  // Send data back.
  $answers_array = array(
    'answers_count' => count($user_comments),
    'top_answers' => $top_comments,
    'top_answers_count' => count($top_comments),
  );

  return $answers_array;
}
